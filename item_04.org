#+INCLUDE: "./latex_header.org"
#+TITLE: Item 4 - Maximally Reusable Generic Containers - Part 1

* Question


/How flexible can you make this simple container class?/

How can you best implement copy construction and copy assignment for the following fixed-length vector class?
How can you provide maximum usability for construction and assignment?

#+begin_src cpp
  template<typename T, size_t size> 
    class fixed_vector {
    public:
        typedef T* iterator;
        typedef const T* const_iterator;
        iterator begin()       { return v_; }
        iterator end()         { return v_ + size; }
        const_iterator begin() const { return v_; }
        const_iterator end()   const { return v_ + size; }

    private:
        T v_[size];
    };

#+end_src

* Answer
I would use the default copy constructor and default copy assignment operator, which already copy the contents of =v_=.

